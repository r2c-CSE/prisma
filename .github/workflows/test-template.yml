name: CI Template job

on:
  workflow_call:
    inputs:
      reason:
        description: |
          Reason why this workflow was called. Could be "buildpulse" for
          flaky tests detection or "daily-test" for scheduled full builds,
          "CI" for normal pushes/PRs
        type: string
        required: false
        default: CI
      ubuntuRunner:
        description: Override default runner used for linux tests. Can be used to opt-out of buildjet
        type: string
        default: buildjet-4vcpu-ubuntu-2004
        required: false
      jobTimeout:
        description: Timeout for the jobs. Default is 90 minutes
        type: number
        default: 90
        required: false
      jobsToRun:
        description: Jobs to run. See .github/workflows/scripts/detect-jobs-to-run.js script
        type: string
        default: '-all-'
        required: false
      queryEngine:
        description: List of query engines to run tests on as JSON array
        type: string
        default: '["library", "binary"]'
      pnpmVersion:
        description: pnpm package manager version
        type: string
        default: '8'
    secrets:
      BUILDPULSE_ACCESS_KEY_ID:
        required: false
      BUILDPULSE_SECRET_ACCESS_KEY:
        required: false
      # Docker Hub credentials must be passed to avoid rate limiting when using Buildjet runners
      # But they are not required, so forks can run the workflow without defining them
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
      BOT_TOKEN:
        required: false

env:
  HAS_BUILDPULSE_SECRETS: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID != '' && secrets.BUILDPULSE_SECRET_ACCESS_KEY != '' }}
  PRISMA_TELEMETRY_INFORMATION: 'prisma test.yml'
  # To hide "Update available 0.0.0 -> x.x.x"
  PRISMA_HIDE_UPDATE_MESSAGE: true

jobs:

  client-driveradapters:
    timeout-minutes: ${{ inputs.jobTimeout }}
    runs-on: ubuntu-latest

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}

    strategy:
      fail-fast: false
      matrix:
        flavor: ['js_pg']
        shard: ['1/6', '2/6', '3/6', '4/6', '5/6', '6/6']
        node: [20] #[16, 18, 20]

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        if: "${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - run: docker compose -f docker/docker-compose.yml up --detach postgres

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: false

      # - run: pnpm run test:functional --flavor ${{ matrix.flavor }} --shard ${{ matrix.shard }} --runInBand
      #   working-directory: packages/client
      #   env:
      #     PRISMA_DISABLE_QUAINT_EXECUTORS: true, # ensures quaint runs no queries
      #     NODE_NO_WARNINGS: 1 # hides undici websocket warnings
      #     NODE_OPTIONS: '--max-old-space-size=8096'
      #     JEST_JUNIT_SUITE_NAME: 'client/functional'
      #     JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      # - run: docker compose -f docker/docker-compose.yml down
      # - run: docker compose -f docker/docker-compose.yml up --detach postgres

      - run: pnpm run test:functional --flavor ${{ matrix.flavor }} --shard ${{ matrix.shard }} --runInBand
        working-directory: packages/client
        env:
          PRISMA_DISABLE_QUAINT_EXECUTORS: true, # ensures quaint runs no queries
          NODE_NO_WARNINGS: 1 # hides undici websocket warnings
          NODE_OPTIONS: '--max-old-space-size=8096'
          JEST_JUNIT_SUITE_NAME: 'client/functional'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true
          RECORDINGS: write

      - run: docker compose -f docker/docker-compose.yml down
      - run: docker compose -f docker/docker-compose.yml up --detach postgres

      - run: pnpm run test:functional --flavor ${{ matrix.flavor }} --shard ${{ matrix.shard }} --runInBand
        working-directory: packages/client
        env:
          PRISMA_DISABLE_QUAINT_EXECUTORS: true, # ensures quaint runs no queries
          NODE_NO_WARNINGS: 1 # hides undici websocket warnings
          NODE_OPTIONS: '--max-old-space-size=8096'
          JEST_JUNIT_SUITE_NAME: 'client/functional'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true
          RECORDINGS: read